

------------ Cleaning the enviorment ------------


coq_makefile -f _CoqProject Archi.v combine.v ConcreteToSymbolicLemmas.v Coqlib.v CrConcreteSemanticsTransformer.v CrDsl.v CrIdentifiers.v CrParser.v CrProgramState.v CrSymbolicSemanticsTransformer.v CrTransformer.v CtrlPlaneInvariants.v first_generated.v HelperLemmas.v Integers.v ListUtils.v Maps.v NoDupLists.v Rocqlib.v second_generated.v SmtExpr.v SmtQuery.v test_maps.v Zbits.v -o Makefile
CLEAN


------------ Compiling first P4 file: first.p4 ------------


Using compiler: ./p4c/build/rocq
Using converter: convert.py
Output file: ../first_generated.v
Running P4 compiler...
P4 compilation completed


------------ Compiling second P4 file: second.p4 ------------


Output file: ../second_generated.v
Running P4 compiler...
P4 compilation completed


------------ Make ROCQ ------------


COQDEP VFILES
COQC Archi.v
COQC Rocqlib.v
COQC Integers.v
COQC CrIdentifiers.v
COQC CrProgramState.v
COQC SmtExpr.v
COQC NoDupLists.v
COQC CrTransformer.v
COQC CrSymbolicSemanticsTransformer.v
COQC ListUtils.v
COQC CrConcreteSemanticsTransformer.v
COQC HelperLemmas.v
COQC CtrlPlaneInvariants.v
COQC ConcreteToSymbolicLemmas.v
Axioms:
functional_extensionality_dep :
  forall (A : Type) (B : A -> Type) (f g : forall x : A, B x),
  (forall x : A, f x = g x) -> f = g
COQC SmtQuery.v
Axioms:
smt_query_sound_none :
  forall e : SmtBoolExpr,
  smt_query e = SmtUnsat ->
  forall v' : SmtValuation, eval_smt_bool e v' = false
smt_query : SmtBoolExpr -> SmtResult
FunctionalExtensionality.functional_extensionality_dep :
  forall (A : Type) (B : A -> Type) (f g : forall x : A, B x),
  (forall x : A, f x = g x) -> f = g
Axioms:
smt_query_sound_some :
  forall (e : SmtBoolExpr) (v : SmtValuation),
  smt_query e = SmtSat v -> eval_smt_bool e v = true
smt_query : SmtBoolExpr -> SmtResult
FunctionalExtensionality.functional_extensionality_dep :
  forall (A : Type) (B : A -> Type) (f g : forall x : A, B x),
  (forall x : A, f x = g x) -> f = g
COQC first_generated.v
COQC second_generated.v
COQC combine.v
     = smt_query
         (SmtBoolNot
            (SmtBoolAnd
               (SmtBoolAnd
                  (SmtBoolAnd SmtTrue
                     (SmtBoolEq
                        (SmtConditional SmtTrue
                           (SmtConditional SmtTrue
                              (SmtBitAdd
                                 (SmtConst
                                    {|
                                      intval := 0;
                                      intrange := Z_mod_modulus_range' 0
                                    |})
                                 (SmtConst
                                    {|
                                      intval := 0;
                                      intrange := Z_mod_modulus_range' 0
                                    |}))
                              (SmtConst
                                 {|
                                   intval := 0;
                                   intrange := Z_mod_modulus_range' 0
                                 |}))
                           (SmtConst
                              {|
                                intval := 0;
                                intrange := Z_mod_modulus_range' 0
                              |}))
                        (SmtConditional SmtTrue
                           (SmtConditional SmtTrue
                              (SmtBitAdd
                                 (SmtConst
                                    {|
                                      intval := 1;
                                      intrange := Z_mod_modulus_range' 1
                                    |})
                                 (SmtConst
                                    {|
                                      intval := 0;
                                      intrange := Z_mod_modulus_range' 0
                                    |}))
                              (SmtConst
                                 {|
                                   intval := 0;
                                   intrange := Z_mod_modulus_range' 0
                                 |}))
                           (SmtConst
                              {|
                                intval := 0;
                                intrange := Z_mod_modulus_range' 0
                              |}))))
                  (SmtBoolEq
                     (SmtConditional SmtTrue
                        (SmtConditional SmtTrue
                           (SmtBitAdd
                              (SmtConst
                                 {|
                                   intval := 0;
                                   intrange := Z_mod_modulus_range' 0
                                 |})
                              (SmtConst
                                 {|
                                   intval := 0;
                                   intrange := Z_mod_modulus_range' 0
                                 |}))
                           (SmtConst
                              {|
                                intval := 0;
                                intrange := Z_mod_modulus_range' 0
                              |}))
                        (SmtConst
                           {|
                             intval := 0; intrange := Z_mod_modulus_range' 0
                           |}))
                     (SmtConditional SmtTrue
                        (SmtConditional SmtTrue
                           (SmtBitAdd
                              (SmtConst
                                 {|
                                   intval := 1;
                                   intrange := Z_mod_modulus_range' 1
                                 |})
                              (SmtConst
                                 {|
                                   intval := 0;
                                   intrange := Z_mod_modulus_range' 0
                                 |}))
                           (SmtConst
                              {|
                                intval := 0;
                                intrange := Z_mod_modulus_range' 0
                              |}))
                        (SmtConst
                           {|
                             intval := 0; intrange := Z_mod_modulus_range' 0
                           |})))) SmtTrue))
     : SmtResult
COQC Coqlib.v
COQC CrParser.v
COQC CrDsl.v
COQC Maps.v
COQC test_maps.v
COQC Zbits.v


------------ Run Python Script ------------


Running coqc on ../combine.v...
sat
[]
Conversion completed successfully
